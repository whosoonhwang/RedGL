[
  {
    "constructorYn": true,
    "title": "RedBufferInfo",
    "description": "\n    - RedBufferInfo 인스턴스 생성자\n    - <b>유일키</b>만 지원하며 키 중복일경우 기존 캐싱된 버퍼 정보를 반환함.\n",
    "params": {
      "redGL": [
        {
          "type": "Red Instance"
        },
        "redGL 인스턴스"
      ],
      "bufferType": [
        {
          "type": "String"
        },
        "- 버퍼타입을 지정",
        "- RedBufferInfo.ARRAY_BUFFER or RedBufferInfo.ELEMENT_ARRAY_BUFFER"
      ],
      "key": [
        {
          "type": "String"
        },
        "- 등록될 키명"
      ],
      "shaderPointerKey": [
        {
          "type": "null or String"
        },
        "- <b>arrayBuffer일때만 사용</b>",
        "- Shade내의 바인딩될 attribute이름"
      ],
      "arrayData": [
        {
          "type": "TypedArray"
        },
        "버퍼 raw data"
      ],
      "pointSize": [
        {
          "type": "Integer"
        },
        "포인트 구성사이즈"
      ],
      "pointNum": [
        {
          "type": "Number"
        },
        "포인트 갯수",
        "입력하지않으면 rawData/pointSize로 자동입력"
      ],
      "normalize": [
        {
          "type": "Boolean"
        },
        "기본값 : false"
      ],
      "stride": [
        {
          "type": "Number"
        },
        "기본값 : 0"
      ],
      "offset": [
        {
          "type": "Number"
        },
        "기본값 : 0"
      ],
      "drawMode": [
        {
          "type": "Integer"
        },
        "기본값 : gl.STATIC_DRAW"
      ]
    },
    "example": "\n    var test;\n    test = RedGL(Canvas Element)\n    // basic이라는 이름으로 버텍스 쉐이더를 만든다. \n    test.createShader(test,'basic', RedBufferInfo.VERTEX_SHADER, 쉐이더소스)\n    test.createShader(test,'basic', RedBufferInfo.FRAGMENT_SHADER, 쉐이더소스)\n    test.createProgram(\n        test,'basic',\n        test.createShader(test,'basic', RedBufferInfo.VERTEX_SHADER),\n        test.createShader(test,'basic', RedBufferInfo.FRAGMENT_SHADER)\n    )\n",
    "return": "RedBufferInfo Instance"
  }
]